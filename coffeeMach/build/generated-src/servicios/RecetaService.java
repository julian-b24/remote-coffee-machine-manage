//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `CoffeMach.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package servicios;

public interface RecetaService extends com.zeroc.Ice.Object
{
    String[] consultarIngredientes(com.zeroc.Ice.Current current);

    String[] consultarRecetas(com.zeroc.Ice.Current current);

    String[] consultarProductos(com.zeroc.Ice.Current current);

    void definirProducto(String nombre, int precio, java.util.Map<java.lang.String, java.lang.Integer> ingredientes, com.zeroc.Ice.Current current);

    void borrarReceta(int cod, com.zeroc.Ice.Current current);

    void definirRecetaIngrediente(int idReceta, int idIngrediente, int valor, com.zeroc.Ice.Current current);

    String registrarReceta(String nombre, int precio, com.zeroc.Ice.Current current);

    String registrarIngrediente(String nombre, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::servicios::RecetaService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::servicios::RecetaService";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_consultarIngredientes(RecetaService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String[] ret = obj.consultarIngredientes(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeStringSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_consultarRecetas(RecetaService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String[] ret = obj.consultarRecetas(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeStringSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_consultarProductos(RecetaService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String[] ret = obj.consultarProductos(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeStringSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_definirProducto(RecetaService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_nombre;
        int iceP_precio;
        java.util.Map<java.lang.String, java.lang.Integer> iceP_ingredientes;
        iceP_nombre = istr.readString();
        iceP_precio = istr.readInt();
        iceP_ingredientes = MapStrIntHelper.read(istr);
        inS.endReadParams();
        obj.definirProducto(iceP_nombre, iceP_precio, iceP_ingredientes, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_borrarReceta(RecetaService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_cod;
        iceP_cod = istr.readInt();
        inS.endReadParams();
        obj.borrarReceta(iceP_cod, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_definirRecetaIngrediente(RecetaService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_idReceta;
        int iceP_idIngrediente;
        int iceP_valor;
        iceP_idReceta = istr.readInt();
        iceP_idIngrediente = istr.readInt();
        iceP_valor = istr.readInt();
        inS.endReadParams();
        obj.definirRecetaIngrediente(iceP_idReceta, iceP_idIngrediente, iceP_valor, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registrarReceta(RecetaService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_nombre;
        int iceP_precio;
        iceP_nombre = istr.readString();
        iceP_precio = istr.readInt();
        inS.endReadParams();
        String ret = obj.registrarReceta(iceP_nombre, iceP_precio, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registrarIngrediente(RecetaService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_nombre;
        iceP_nombre = istr.readString();
        inS.endReadParams();
        String ret = obj.registrarIngrediente(iceP_nombre, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "borrarReceta",
        "consultarIngredientes",
        "consultarProductos",
        "consultarRecetas",
        "definirProducto",
        "definirRecetaIngrediente",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "registrarIngrediente",
        "registrarReceta"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_borrarReceta(this, in, current);
            }
            case 1:
            {
                return _iceD_consultarIngredientes(this, in, current);
            }
            case 2:
            {
                return _iceD_consultarProductos(this, in, current);
            }
            case 3:
            {
                return _iceD_consultarRecetas(this, in, current);
            }
            case 4:
            {
                return _iceD_definirProducto(this, in, current);
            }
            case 5:
            {
                return _iceD_definirRecetaIngrediente(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 10:
            {
                return _iceD_registrarIngrediente(this, in, current);
            }
            case 11:
            {
                return _iceD_registrarReceta(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
